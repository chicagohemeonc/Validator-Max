/* This file was generated by PyBindGen 0.15.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;


#include "peptide_fragment.hpp"
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    PeptideFragment *obj;
    PyBindGenWrapperFlags flags:8;
} PyPeptideFragment;


extern PyTypeObject PyPeptideFragment_Type;


typedef struct {
    PyObject_HEAD
    ListD *obj;
} PyListD;


typedef struct {
    PyObject_HEAD
    PyListD *container;
    ListD::iterator *iterator;
} PyListDIter;


extern PyTypeObject PyListD_Type;
extern PyTypeObject PyListDIter_Type;

int _wrap_convert_py2c__ListD(PyObject *arg, ListD *container);

int _wrap_convert_py2c__double(PyObject *value, double *address);

static PyMethodDef PeptideFragmentSingleton_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


static PyObject* _wrap_PyPeptideFragment__get_a(PyPeptideFragment *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyListD *py_ListD;

    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(self->obj->a);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}
static int _wrap_PyPeptideFragment__set_a(PyPeptideFragment *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ListD, &self->obj->a)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPeptideFragment__get_b(PyPeptideFragment *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyListD *py_ListD;

    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(self->obj->b);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}
static int _wrap_PyPeptideFragment__set_b(PyPeptideFragment *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ListD, &self->obj->b)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPeptideFragment__get_c(PyPeptideFragment *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyListD *py_ListD;

    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(self->obj->c);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}
static int _wrap_PyPeptideFragment__set_c(PyPeptideFragment *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ListD, &self->obj->c)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPeptideFragment__get_x(PyPeptideFragment *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyListD *py_ListD;

    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(self->obj->x);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}
static int _wrap_PyPeptideFragment__set_x(PyPeptideFragment *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ListD, &self->obj->x)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPeptideFragment__get_y(PyPeptideFragment *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyListD *py_ListD;

    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(self->obj->y);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}
static int _wrap_PyPeptideFragment__set_y(PyPeptideFragment *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ListD, &self->obj->y)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPeptideFragment__get_z(PyPeptideFragment *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyListD *py_ListD;

    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(self->obj->z);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}
static int _wrap_PyPeptideFragment__set_z(PyPeptideFragment *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ListD, &self->obj->z)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPeptideFragment__get_zdot(PyPeptideFragment *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyListD *py_ListD;

    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(self->obj->zdot);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}
static int _wrap_PyPeptideFragment__set_zdot(PyPeptideFragment *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ListD, &self->obj->zdot)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPeptideFragment__get_mass(PyPeptideFragment *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyListD *py_ListD;

    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(self->obj->mass);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}
static int _wrap_PyPeptideFragment__set_mass(PyPeptideFragment *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ListD, &self->obj->mass)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyPeptideFragment__getsets[] = {
    {
        (char*) "a", /* attribute name */
        (getter) _wrap_PyPeptideFragment__get_a, /* C function to get the attribute */
        (setter) _wrap_PyPeptideFragment__set_a, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "c", /* attribute name */
        (getter) _wrap_PyPeptideFragment__get_c, /* C function to get the attribute */
        (setter) _wrap_PyPeptideFragment__set_c, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "b", /* attribute name */
        (getter) _wrap_PyPeptideFragment__get_b, /* C function to get the attribute */
        (setter) _wrap_PyPeptideFragment__set_b, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "zdot", /* attribute name */
        (getter) _wrap_PyPeptideFragment__get_zdot, /* C function to get the attribute */
        (setter) _wrap_PyPeptideFragment__set_zdot, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "mass", /* attribute name */
        (getter) _wrap_PyPeptideFragment__get_mass, /* C function to get the attribute */
        (setter) _wrap_PyPeptideFragment__set_mass, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "y", /* attribute name */
        (getter) _wrap_PyPeptideFragment__get_y, /* C function to get the attribute */
        (setter) _wrap_PyPeptideFragment__set_y, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "x", /* attribute name */
        (getter) _wrap_PyPeptideFragment__get_x, /* C function to get the attribute */
        (setter) _wrap_PyPeptideFragment__set_x, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "z", /* attribute name */
        (getter) _wrap_PyPeptideFragment__get_z, /* C function to get the attribute */
        (setter) _wrap_PyPeptideFragment__set_z, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

static int
_wrap_PyPeptideFragment__tp_init(PyPeptideFragment *self, PyObject *args, PyObject *kwargs)
{
    int massType = 1;
    const char *keywords[] = {"massType", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|i", (char **) keywords, &massType)) {
        return -1;
    }
    self->obj = new PeptideFragment(massType);
    return 0;
}


PyObject *
_wrap_PyPeptideFragment_analyze(PyPeptideFragment *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char *peptide;
    int charge = 1;
    char *modification = (char *)"";
    const char *keywords[] = {"peptide", "charge", "modification", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s|is", (char **) keywords, &peptide, &charge, &modification)) {
        return NULL;
    }
    self->obj->analyze(peptide, charge, modification);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyPeptideFragment_a_ions(PyPeptideFragment *self)
{
    PyObject *py_retval;
    ListD retval;
    PyListD *py_ListD;

    retval = self->obj->a_ions();
    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(retval);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}


PyObject *
_wrap_PyPeptideFragment_b_ions(PyPeptideFragment *self)
{
    PyObject *py_retval;
    ListD retval;
    PyListD *py_ListD;

    retval = self->obj->b_ions();
    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(retval);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}


PyObject *
_wrap_PyPeptideFragment_sequence(PyPeptideFragment *self)
{
    PyObject *py_retval;
    std::string retval;

    retval = self->obj->sequence();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyPeptideFragment_y_ions(PyPeptideFragment *self)
{
    PyObject *py_retval;
    ListD retval;
    PyListD *py_ListD;

    retval = self->obj->y_ions();
    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(retval);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}


PyObject *
_wrap_PyPeptideFragment_peptide_mass(PyPeptideFragment *self)
{
    PyObject *py_retval;
    ListD retval;
    PyListD *py_ListD;

    retval = self->obj->peptide_mass();
    py_ListD = PyObject_New(PyListD, &PyListD_Type);
    py_ListD->obj = new ListD(retval);
    py_retval = Py_BuildValue((char *) "N", py_ListD);
    return py_retval;
}


PyObject *
_wrap_PyPeptideFragment_pI(PyPeptideFragment *self)
{
    PyObject *py_retval;
    double retval;

    retval = self->obj->pI();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyPeptideFragment_composition(PyPeptideFragment *self)
{
    PyObject *py_retval;
    std::string retval;

    retval = self->obj->composition();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}

static PyMethodDef PyPeptideFragment_methods[] = {
    {(char *) "analyze", (PyCFunction) _wrap_PyPeptideFragment_analyze, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "a_ions", (PyCFunction) _wrap_PyPeptideFragment_a_ions, METH_NOARGS, NULL },
    {(char *) "b_ions", (PyCFunction) _wrap_PyPeptideFragment_b_ions, METH_NOARGS, NULL },
    {(char *) "sequence", (PyCFunction) _wrap_PyPeptideFragment_sequence, METH_NOARGS, NULL },
    {(char *) "y_ions", (PyCFunction) _wrap_PyPeptideFragment_y_ions, METH_NOARGS, NULL },
    {(char *) "peptide_mass", (PyCFunction) _wrap_PyPeptideFragment_peptide_mass, METH_NOARGS, NULL },
    {(char *) "pI", (PyCFunction) _wrap_PyPeptideFragment_pI, METH_NOARGS, NULL },
    {(char *) "composition", (PyCFunction) _wrap_PyPeptideFragment_composition, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyPeptideFragment__tp_dealloc(PyPeptideFragment *self)
{
        PeptideFragment *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyPeptideFragment__tp_richcompare (PyPeptideFragment *PYBINDGEN_UNUSED(self), PyPeptideFragment *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyPeptideFragment_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyPeptideFragment_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "PeptideFragmentSingleton.PeptideFragment",            /* tp_name */
    sizeof(PyPeptideFragment),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyPeptideFragment__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyPeptideFragment__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyPeptideFragment_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyPeptideFragment__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyPeptideFragment__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
PyListDIter__tp_clear(PyListDIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
PyListDIter__tp_traverse(PyListDIter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_PyListD__tp_dealloc(PyListD *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_PyListDIter__tp_dealloc(PyListDIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_PyListD__tp_iter(PyListD *self)
{
    PyListDIter *iter = PyObject_GC_New(PyListDIter, &PyListDIter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new ListD::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_PyListDIter__tp_iter(PyListDIter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_PyListDIter__tp_iternext(PyListDIter *self)
{
    PyObject *py_retval;
    ListD::iterator iter;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "d", (*iter));
    return py_retval;
}

int _wrap_convert_py2c__double(PyObject *value, double *address)
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__ListD(PyObject *arg, ListD *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &PyListD_Type)) {
        *container = *((PyListD*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            double item;
            if (!_wrap_convert_py2c__double(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a ListD instance, or a list of double");
        return 0;
    }
    return 1;
}


static int
_wrap_PyListD__tp_init(PyListD *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new ListD;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__ListD(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject PyListD_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "PeptideFragmentSingleton.ListD",            /* tp_name */
    sizeof(PyListD),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyListD__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_PyListD__tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyListD__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject PyListDIter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "PeptideFragmentSingleton.ListDIter",            /* tp_name */
    sizeof(PyListDIter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyListDIter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyListDIter__tp_traverse,     /* tp_traverse */
    (inquiry)PyListDIter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_PyListDIter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_PyListDIter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyMODINIT_FUNC
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif
initPeptideFragmentSingleton(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "PeptideFragmentSingleton", PeptideFragmentSingleton_functions, NULL);
    if (m == NULL) {
        return;
    }
    /* Register the 'PeptideFragment' class */
    if (PyType_Ready(&PyPeptideFragment_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PeptideFragment", (PyObject *) &PyPeptideFragment_Type);
    /* Register the 'ListD' class */
    if (PyType_Ready(&PyListD_Type)) {
        return;
    }
    if (PyType_Ready(&PyListDIter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ListD", (PyObject *) &PyListD_Type);
    PyModule_AddObject(m, (char *) "ListDIter", (PyObject *) &PyListDIter_Type);
}
